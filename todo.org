#+title: Todo
* [X] Add public OpenAI API call definitions for existing tools
* [X] Add language to symbol and use it find parser when generating a summary
* [X] Fix python decorators to be included in raw symbol output
* [X] Implement recursive parsing function. Do not parse the file if it's hash did not change.
* [ ] Add data access helper that reads file from data store along with all symbols
* [X] Add a helper to resolve import edge dependencies
* [X] Need to delete files, packages, symbols, etc that are no longer exist on the disk
* [X] Create helper methods to return models from parser objects
* [X] Fix _resolve_to_package_id to use data repository
* [X] Figure out a way to call functions for language parsers after finishing parsing files
* [ ] Language support
** [ ] Golang
*** [X] When parsing golang methods, link these symbols back to structure that should be defined in the same package.
** [ ] JavaScript
** [ ] TypeScript
* [ ] Add git support
** [ ]  Use git to quickly find what files have changed
* [ ] Expose a helper method in Project class to calculate embedding for the arbitrary search term
* [ ] Better in-memory vector index
* [X] Create a helper that generates a summary view of a file
* [ ] MCP-compatible tool definition support
* [X] Tools
** [X] File list
** [X] Summary lists
- Takes a list of file paths or packages
- Returns summary views of files
** [X] Get full files
- A list of files
** [X] Search through symbols
- Needle
- Result list
* [ ] Figure out a way to update embeddings in background
* [ ] Add embedding value caching
** [ ] A shared cross-project table
** [ ] A server with simple API to insert embedding value for a hash and get multiple embedding values for a hash
* [ ] Do not warn on pass_statement
* [ ] Add support for Python del_statement?
* [ ] Add support for FTS when embedding search is not feasible
* [ ] Even if file can not be parsed, store information about it in the database
* [ ] When reparsing file and symbols did not change - do not recalculate embeddings
* [ ] Build a tool that provides recommendations for a list of files/packages by applying PageRank algorithm to dependencies.
* [X] Add package_id to symbols to speed up search
* [ ] Add caching for go.mod at project level to avoid loading it for each and every Go file
* [ ] Do not refresh DuckDB index if project did not change
* [X] Figure out a way to have a single query parameter that searches code by embedding and documentation. Idea: calculate embedding vector for commend/docstring and use that instead of FTS. Fallback to FTS if embeddings are not enabled.
* [ ] Add symbol search test

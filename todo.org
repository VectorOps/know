#+title: Todo
* [ ] Introduce concept of project which is a collection of repositories
** [ ] Create project behind the scenes if not provided when initializing repo
** [ ] Change code to work with projects instead of repos
* [ ] Add a way to initialize project, but only scan and work from a subpath
** [ ] Search should be scoped to files in subdirectories
* [ ] Generic helper to find references using ts query in a generic way
* [ ] Add query timeouts to DuckDB to detect lockups
* [X] Fix mypy warnings
* [ ] Repomap tool
** [ ] Should only look for exported symbols
* [ ] Search tool
** [ ] Lower weight of comment symbols?
** [X] Make tool search all symbols, not just public by default
** [X] Do not crash if input enums are wrong. ValueError: 'identifier' is not a valid SymbolKind.
* [X] Update chat example to use litellm instead of OpenAI API directly
* [X] Cache improvements
** [X] Collect and mass-update embeddings that were recently used
** [X] Add lifecycle rules to cleanup old unused embeddings
* [X] Embedding calculation should include docstring and prior comment
* [ ] Add a inherits field to symbols and use for classes
** [ ] Update SymbolRef to use these too
* [ ] When parsing references from files, skip duplicate names?
* [X] Add dedicated single-thread worker for DuckDB to work around its thread handling.
* [X] Define the meaning of to_package_path for ParsedSymbolRef (virtual path, physical path, etc)
* [ ] Add a way to override file mapping. For example, .h might point to C or ObjC parser.
* [ ] Move some tool parameters to project settings
* [ ] Language support
** [-] Python
*** [X] Test module path resolution
*** [X] Fix to_package_path for python
        to_package_path='os', for 'os.path.join'
*** [ ] Fix summary generator to not include module docstring if level is short summary - add special handling to _handle_expression_string
** [X] Golang
*** [X] When parsing golang methods, link these symbols back to structure that should be defined in the same package.
*** [X] Refactror node parser to return nodes like python and typescript parsers
*** [X] Generics
*** [X] Add support for multi-module projects with nested go.mod
** [-] TypeScript
*** [X] Reference parsing
*** [X] Generics
*** [X] Namespaces
*** [X] CommonJS imports and exports
*** [X] Modules
*** [ ] Declare
*** [ ] Test module path resolution
*** [ ] Include extends type to ref results
*** [X] React TSX support
** [X] JavaScript
*** [X] Add support for member_expression, empty_statement node type
** [ ] C
** [ ] C#
** [ ] Java
** [ ] PHP
* [X] Refactor symbols
** [X] Everything is a symbol
** [X] Update symbol upsert to work without key. If key is not set, then do matching by content.
** [X] Do insert/delete instead of update?
** [X] Rename to Node
* [X] MCP server
* [ ] A server with simple API to insert embedding value for a hash and get multiple embedding values for a hash
* [X] Add support for Python del_statement, if statement, etc.
* [ ] Documentation generator
* [ ] CI/CD pipeline
* [ ] Do not refresh DuckDB index if project did not change
* [ ] Improve symbol search
** [ ] Add reranking model support
* [-] Add infra to maintain in-memory tools like RepoMap
** [ ] Enable/Disable tools configuration flag
* [ ] Validate traversal logic to ensure we can not go outside of the project directory.
* [ ] Search to support exclude. For example - tests
* [ ] Golang summary optimizations - group multiple var/const definitions into a single block to save on tokens
* [X] Figure out lockup in filelist tool
* [X] DuckDB concurrent writes problem when updating vectors: duckdb.duckdb.TransactionException: TransactionContext Error: Failed to commit: write-write conflict on key
* [X] Only include mentioned symbols in repomap instead of file summary?
* [ ] When including child symbols, pass visibility mode from parent query. Do not include private methods for publicly requested symbols.
* [ ] Cross-repo symbol search
* [ ] Non-programming languages parsers (rst/md/text). Figure out chunking.
* [ ] Add git support
** [ ]  Use git to quickly find what files have changed?
* [X] Configuration object
* [X] Measure startup time
* [X] Measure time it takes to process file, a batch of files, etc
* [X] Rewrite SQL backends to use PyPika
* [X] Add public OpenAI API call definitions for existing tools
* [X] Add language to symbol and use it find parser when generating a summary
* [X] Fix python decorators to be included in raw symbol output
* [X] Implement recursive parsing function. Do not parse the file if it's hash did not change.
* [X] Add data access helper that reads file from data store along with all symbols
* [X] Add a helper to resolve import edge dependencies
* [X] Need to delete files, packages, symbols, etc that are no longer exist on the disk
* [X] Create helper methods to return models from parser objects
* [X] Fix _resolve_to_package_id to use data repository
* [X] Figure out a way to call functions for language parsers after finishing parsing files
* [X] Get rid of symbol hashes for short (all?) symbols - just check the body.
* [X] Add a flag to mark symbols as exported instead of treating them as public
* [X] Summary mode where parent symbols are also included
* [X] Move parse() implementation to AbstractCodeparser. Allow to customize.
* [X] Expose a helper method in Project class to calculate embedding for the arbitrary search term
* [X] Better in-memory vector index for faster lookups
* [X] Separate embeddings from primary data store
* [X] Create a helper that generates a summary view of a file
* [X] Tools
** [X] File list
** [X] Summary lists
- Takes a list of file paths or packages
- Returns summary views of files
** [X] Get full files
- A list of files
** [X] Search through symbols
- Needle
- Result list
* [X] Figure out a way to update embeddings in background
* [X] Add embedding value caching
** [X] A shared cross-project table
* [X] Do not warn on python pass_statement
* [X] Add support for FTS when embedding search is not feasible
* [X] Even if file can not be parsed, store information about it in the database
* [X] When reparsing file and symbols did not change - do not recalculate embeddings
* [X] Build a tool that provides recommendations for a list of files/packages by applying PageRank algorithm to dependencies.
* [X] Add package_id to symbols to speed up search
* [X] Add caching for go.mod at project level to avoid loading it for each and every Go file
* [X] Figure out a way to have a single query parameter that searches code by embedding and documentation. Idea: calculate embedding vector for commend/docstring and use that instead of FTS. Fallback to FTS if embeddings are not enabled.
* [X] Add symbol search test
* [X] Python parser should preserve decorators when parsing symbols. Extend model to collect decorators and store them in model.
* [X] Python parser does not parse symbols of decorated methods
* [X] Search for public symbols by default
* [X] Recommendation engine
** [X] Store all references for each file
- New model
- Include import information, if it can be resolved
** [X] Create in-memory NetworkX graph
- Add all project public symbols and all references
- Implement ranking algorithm to find recommendations
** [X] Figure out incremental graph updates
** [X] Create a tool that takes in file paths, query, runs above algorithm
* [X] Create a simple web ui to navigate project database
* [X] Add a way to destroy the project. This should also shutdown/stop embedding worker.
** [X] Add a destory() method to embedding worker
* [X] Strip spaces from multi-line commends, but recover when generating summaries
* [X] Instead of having multiple flags for summary/full/none, add enum to tools
* [X] If embedding model for the vector does not match current embedding model - either update OR skip
* [X] Find a way to de-dupe embedding queue to avoid calculating vectors multiple times
* [X] Move file summary helper out of tools
* [X] Better lookup with filters methods in data layer, similar to symbol search instead of dedicated methods.
* [X] Compress long symbol bodies
